{"uid":"f433a84db1d21e28","name":"test_case[dic3]","fullName":"testCase.test_case.TestCase#test_case","historyId":"b1684725d90be680aa62ddda15e275a8","time":{"start":1683368514623,"stop":1683368515764,"duration":1141},"status":"failed","statusMessage":"AssertionError: 预期结果与实际结果不符，预期结果：{'errorCode':'0'},实际结果：0\nassert '0' == \"{'errorCode':'0'}\"\n  - {'errorCode':'0'}\n  + 0","statusTrace":"self = <testCase.test_case.TestCase object at 0x10c2aec20>\ndic = {'caseid': 1.0, 'expect': \"{'errorCode':'0'}\", 'header': '{\"cookie\":\"JSESSIONID=CAE73E37903B68F9EBC1BE468D5A963C; Path...b90bcb70640183e09d1e755ead823; Domain=wanandroid.com; Expires=Mon, 05-Jun-2023 10:21:55 GMT; Path=/\"}', 'id': 4.0, ...}\n\n    @pytest.mark.parametrize(\"dic\", test_data)\n    def test_case(self, dic):\n        logger.debug(f\"====>{dic}\")\n        # 判断是否有依赖,执行依赖接口替换依赖字段\n        ps = PreSolve(test_data)\n        dic[\"header\"], dic[\"value\"] = ps.presolve(dic)\n        #实例化\n        ch = ConfigHttp(dic)\n        #调用实例方法\n        res = ch.run()\n        # 实例化\n        pa = PublicAssert(dic, res)\n        # 调用实例方法断言\n        pa.public_assert()\n        # 将响应的json数据转化成字典\n        res_dict = res.json()\n    \n        # 坑一：用if断言需在失败情况下抛出assertion\n        # if str(res_dict[\"errorCode\"]) == str(dic[\"expect\"]):\n        #     print(\"用例执行成功\")\n        # else:\n        #     print(\"用例执行失败\")\n        #     raise AssertionError(\"预期结果与实际结果不符\")\n    \n        # 坑二：try-except不要加在self.assertEqual前后，否则unittest捕获不到AssertionError,就默认为用例通过\n        # try:\n        #     assert str(res_dict[\"errorCode\"]) ==str(dic[\"expect\"]), f\"预期结果与实际结果不符，预期结果：{dic['except']},实际结果：{res_dict['errorCode']}\"\n        # except Exception as msg:\n        #     print(f\"报错信息：{msg}\")\n        #     raise\n    \n        # 2.1.3断言返回的实际结果，断言用例执行成功/失败\n>       assert str(res_dict[\"errorCode\"]) == str(dic[\"expect\"]), f\"预期结果与实际结果不符，预期结果：{dic['expect']},实际结果：{res_dict['errorCode']}\"\nE       AssertionError: 预期结果与实际结果不符，预期结果：{'errorCode':'0'},实际结果：0\nE       assert '0' == \"{'errorCode':'0'}\"\nE         - {'errorCode':'0'}\nE         + 0\n\ntestCase/test_case.py:60: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: 预期结果与实际结果不符，预期结果：{'errorCode':'0'},实际结果：0\nassert '0' == \"{'errorCode':'0'}\"\n  - {'errorCode':'0'}\n  + 0","statusTrace":"self = <testCase.test_case.TestCase object at 0x10c2aec20>\ndic = {'caseid': 1.0, 'expect': \"{'errorCode':'0'}\", 'header': '{\"cookie\":\"JSESSIONID=CAE73E37903B68F9EBC1BE468D5A963C; Path...b90bcb70640183e09d1e755ead823; Domain=wanandroid.com; Expires=Mon, 05-Jun-2023 10:21:55 GMT; Path=/\"}', 'id': 4.0, ...}\n\n    @pytest.mark.parametrize(\"dic\", test_data)\n    def test_case(self, dic):\n        logger.debug(f\"====>{dic}\")\n        # 判断是否有依赖,执行依赖接口替换依赖字段\n        ps = PreSolve(test_data)\n        dic[\"header\"], dic[\"value\"] = ps.presolve(dic)\n        #实例化\n        ch = ConfigHttp(dic)\n        #调用实例方法\n        res = ch.run()\n        # 实例化\n        pa = PublicAssert(dic, res)\n        # 调用实例方法断言\n        pa.public_assert()\n        # 将响应的json数据转化成字典\n        res_dict = res.json()\n    \n        # 坑一：用if断言需在失败情况下抛出assertion\n        # if str(res_dict[\"errorCode\"]) == str(dic[\"expect\"]):\n        #     print(\"用例执行成功\")\n        # else:\n        #     print(\"用例执行失败\")\n        #     raise AssertionError(\"预期结果与实际结果不符\")\n    \n        # 坑二：try-except不要加在self.assertEqual前后，否则unittest捕获不到AssertionError,就默认为用例通过\n        # try:\n        #     assert str(res_dict[\"errorCode\"]) ==str(dic[\"expect\"]), f\"预期结果与实际结果不符，预期结果：{dic['except']},实际结果：{res_dict['errorCode']}\"\n        # except Exception as msg:\n        #     print(f\"报错信息：{msg}\")\n        #     raise\n    \n        # 2.1.3断言返回的实际结果，断言用例执行成功/失败\n>       assert str(res_dict[\"errorCode\"]) == str(dic[\"expect\"]), f\"预期结果与实际结果不符，预期结果：{dic['expect']},实际结果：{res_dict['errorCode']}\"\nE       AssertionError: 预期结果与实际结果不符，预期结果：{'errorCode':'0'},实际结果：0\nE       assert '0' == \"{'errorCode':'0'}\"\nE         - {'errorCode':'0'}\nE         + 0\n\ntestCase/test_case.py:60: AssertionError","steps":[],"attachments":[{"uid":"19cbca770e65d20e","name":"log","source":"19cbca770e65d20e.txt","type":"text/plain","size":1381}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"testCase"},{"name":"suite","value":"test_case"},{"name":"subSuite","value":"TestCase"},{"name":"host","value":"liushadeMBP"},{"name":"thread","value":"9783-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCase.test_case"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"dic","value":"{'id': 4.0, 'interfaceUrl': 'https://www.wanandroid.com/user/lg/userinfo/json', 'name': 'getinfo', 'method': 'get', 'value': '{}', 'header': '{\"cookie\":\"${Set-Cookie}\"}', 'rely': 'y', 'caseid': 1.0, 'expect': \"{'errorCode':'0'}\"}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"f433a84db1d21e28.json","parameterValues":["{'id': 4.0, 'interfaceUrl': 'https://www.wanandroid.com/user/lg/userinfo/json', 'name': 'getinfo', 'method': 'get', 'value': '{}', 'header': '{\"cookie\":\"${Set-Cookie}\"}', 'rely': 'y', 'caseid': 1.0, 'expect': \"{'errorCode':'0'}\"}"]}