{"uid":"43dc47bddd1bf17b","name":"test_case[dic0]","fullName":"testCase.test_case.TestCase#test_case","historyId":"1eb211e27567e2ea623bd553ee5062cc","time":{"start":1699534894156,"stop":1699534894167,"duration":11},"status":"broken","statusMessage":"requests.exceptions.MissingSchema: Invalid URL 'user/login': No scheme supplied. Perhaps you meant https://user/login?","statusTrace":"self = <testCase.test_case.TestCase object at 0x10fba1ea0>\ndic = {'caseid': '', 'expect': \"{'errorCode':'0','username':'liusha'}\", 'header': '{}', 'id': 1.0, ...}\n\n    @pytest.mark.parametrize(\"dic\", test_data)\n    def test_case(self, dic):\n        logger.debug(f\"====>{dic}\")\n        # 判断是否有依赖,执行依赖接口替换依赖字段\n        ps = PreSolve(test_data)\n        dic[\"header\"], dic[\"value\"] = ps.presolve(dic)\n        # 实例化\n        ch = ConfigHttp(dic)\n        # 调用实例方法\n>       res = ch.run()\n\ntestCase/test_case.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ncommon/configHttp.py:24: in run\n    res = self.__post()\ncommon/configHttp.py:34: in __post\n    res = requests.post(url=self.dic[\"interfaceUrl\"],\nvenv/lib/python3.10/site-packages/requests/api.py:115: in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\nvenv/lib/python3.10/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\nvenv/lib/python3.10/site-packages/requests/sessions.py:573: in request\n    prep = self.prepare_request(req)\nvenv/lib/python3.10/site-packages/requests/sessions.py:484: in prepare_request\n    p.prepare(\nvenv/lib/python3.10/site-packages/requests/models.py:368: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PreparedRequest [POST]>, url = 'user/login', params = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(\"utf8\")\n        else:\n            url = str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if \":\" in url and not url.lower().startswith(\"http\"):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n>           raise MissingSchema(\n                f\"Invalid URL {url!r}: No scheme supplied. \"\n                f\"Perhaps you meant https://{url}?\"\n            )\nE           requests.exceptions.MissingSchema: Invalid URL 'user/login': No scheme supplied. Perhaps you meant https://user/login?\n\nvenv/lib/python3.10/site-packages/requests/models.py:439: MissingSchema","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"requests.exceptions.MissingSchema: Invalid URL 'user/login': No scheme supplied. Perhaps you meant https://user/login?","statusTrace":"self = <testCase.test_case.TestCase object at 0x10fba1ea0>\ndic = {'caseid': '', 'expect': \"{'errorCode':'0','username':'liusha'}\", 'header': '{}', 'id': 1.0, ...}\n\n    @pytest.mark.parametrize(\"dic\", test_data)\n    def test_case(self, dic):\n        logger.debug(f\"====>{dic}\")\n        # 判断是否有依赖,执行依赖接口替换依赖字段\n        ps = PreSolve(test_data)\n        dic[\"header\"], dic[\"value\"] = ps.presolve(dic)\n        # 实例化\n        ch = ConfigHttp(dic)\n        # 调用实例方法\n>       res = ch.run()\n\ntestCase/test_case.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ncommon/configHttp.py:24: in run\n    res = self.__post()\ncommon/configHttp.py:34: in __post\n    res = requests.post(url=self.dic[\"interfaceUrl\"],\nvenv/lib/python3.10/site-packages/requests/api.py:115: in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\nvenv/lib/python3.10/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\nvenv/lib/python3.10/site-packages/requests/sessions.py:573: in request\n    prep = self.prepare_request(req)\nvenv/lib/python3.10/site-packages/requests/sessions.py:484: in prepare_request\n    p.prepare(\nvenv/lib/python3.10/site-packages/requests/models.py:368: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PreparedRequest [POST]>, url = 'user/login', params = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode(\"utf8\")\n        else:\n            url = str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if \":\" in url and not url.lower().startswith(\"http\"):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n>           raise MissingSchema(\n                f\"Invalid URL {url!r}: No scheme supplied. \"\n                f\"Perhaps you meant https://{url}?\"\n            )\nE           requests.exceptions.MissingSchema: Invalid URL 'user/login': No scheme supplied. Perhaps you meant https://user/login?\n\nvenv/lib/python3.10/site-packages/requests/models.py:439: MissingSchema","steps":[],"attachments":[{"uid":"6d8de6f58af143d3","name":"log","source":"6d8de6f58af143d3.txt","type":"text/plain","size":351}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"testCase"},{"name":"suite","value":"test_case"},{"name":"subSuite","value":"TestCase"},{"name":"host","value":"liushadeMBP"},{"name":"thread","value":"72467-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCase.test_case"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"dic","value":"{'id': 1.0, 'interfaceUrl': 'user/login', 'name': 'login', 'method': 'post', 'value': \"{'username':'liusha','password':'123456'}\", 'header': '{}', 'rely': 'n', 'caseid': '', 'expect': \"{'errorCode':'0','username':'liusha'}\"}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"43dc47bddd1bf17b.json","parameterValues":["{'id': 1.0, 'interfaceUrl': 'user/login', 'name': 'login', 'method': 'post', 'value': \"{'username':'liusha','password':'123456'}\", 'header': '{}', 'rely': 'n', 'caseid': '', 'expect': \"{'errorCode':'0','username':'liusha'}\"}"]}